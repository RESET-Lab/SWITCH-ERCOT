from __future__ import division
# Copyright 2017 The Switch Authors. All rights reserved.
# Licensed under the Apache License, Version 2, which is in the LICENSE file.

import os
from pyomo.environ import *

"""

This module defines a simple generation requirementpolicy scheme
for the Switch model based on recent policies in Mexico. In this scheme, 
each generator is categorized as state-owned or private. Dispatched 
electricity that is generated by state-owned sources in each period is 
summed up and must meet an energy goal, set as a required percentage
of all energy that is generated in that period.

This module assumes that the generators.core.no_commit module is being used.
An error will be raised if this module is loaded along the
generators.core.commit package.

"""

def define_components(mod):
    """

    state_owned[g in GENERATION_PROJECTS] is a binary parameter that flags each fuel as
    elegible for RPS accounting or not.

    STATE_OWNED_SOURCES is a set enumerating all energy sources that contribute
    to RPS accounting. It is built by union of all fuels that are RPS elegible
    and the NON_FUEL_ENERGY_SOURCES set.

    STATE_OWNED_PERIODS is a subset of PERIODS for which state-owned goals are defined.

    state_owned_target is the fraction of total generated energy in
    a period that has to be provided by state-owned sources.

    StateOwnedEnergy[p] is an expression that sums all the energy produced using
    RPS-elegible fuels in fuel-based projects in a given period.

    TotalGenerationInPeriod[p] is an expression that sums all the energy
    produced in a given period by all projects. This has to be calculated and
    cannot be taken to be equal to the total load in the period, because
    transmission losses could exist.

    State_Owned_Enforce_Target[p] is the constraint that forces energy produced by
    renewable sources to meet a fraction of the total energy produced in the
    period.

    """

    mod.state_owned = Param(
        mod.GENERATION_PROJECTS,
        within=Boolean,
        default=False)
    mod.STATE_OWNED_SOURCES = Set(
        initialize=mod.GENERATION_PROJECTS,
        filter=lambda m, g: m.state_owned[g])

    mod.state_owned_target = Param(
        within=PercentFraction)

    mod.StateOwnedEnergy = Expression(
        mod.PERIODS,
        rule=lambda m, p: sum(m.DispatchGen[g, t] * m.tp_weight[t]
            for g in m.STATE_OWNED_SOURCES#m.NON_FUEL_BASED_GENS
                for t in m.TPS_FOR_GEN_IN_PERIOD[g, p]))

    mod.State_Owned_Enforce_Target = Constraint(
        mod.PERIODS,
        rule=lambda m, p: (m.StateOwnedEnergy[p] >= 
            m.state_owned_target * total_generation_in_period(m, p)))
            


def total_generation_in_period(model, period):
    return sum(
        model.DispatchGen[g, t] * model.tp_weight[t]
        for g in model.GENERATION_PROJECTS
            for t in model.TPS_FOR_GEN_IN_PERIOD[g, period])


def total_demand_in_period(model, period):
    return sum(model.zone_total_demand_in_period_mwh[zone, period]
               for zone in model.LOAD_ZONES)


def load_inputs(mod, switch_data, inputs_dir):
    """
    The RPS target goals input file is mandatory, to discourage people from
    loading the module if it is not going to be used. It is not necessary to
    specify targets for all periods.

    Mandatory input files:
        rps_targets.csv
            PERIOD, rps_target

    """

    switch_data.load_aug(
        filename=os.path.join(inputs_dir, 'generation_projects_info.csv'),
        select=('GENERATION_PROJECT','state_owned'),
        optional_params=['state_owned'],
        param=(mod.state_owned,))
    switch_data.load_aug(
        filename=os.path.join(inputs_dir, 'state_owned_target.csv'),
        autoselect=True,
        param=(mod.state_owned_target,))


def post_solve(instance, outdir):
    """
    Export energy statistics relevant to RPS studies.

    """

    import switch_model.reporting as reporting
    # def get_row(m, p):
    #     row = (p,)
    #     row += (m.RPSFuelEnergy[p] / 1000,)
    #     row += (m.RPSNonFuelEnergy[p] / 1000,)
    #     row += (total_generation_in_period(m,p) / 1000,)
    #     row += ((m.RPSFuelEnergy[p] + m.RPSNonFuelEnergy[p]) /
    #         total_generation_in_period(m,p),)
    #     row += (total_demand_in_period(m, p),)
    #     row += ((m.RPSFuelEnergy[p] + m.RPSNonFuelEnergy[p]) /
    #         total_demand_in_period(m, p),)
    #     return row
    # reporting.write_table(
    #     instance, instance.RPS_PERIODS,
    #     output_file=os.path.join(outdir, "rps_energy.csv"),
    #     headings=("PERIOD", "RPSFuelEnergyGWh", "RPSNonFuelEnergyGWh",
    #         "TotalGenerationInPeriodGWh", "RPSGenFraction",
    #         "TotalSalesInPeriodGWh", "RPSSalesFraction"),
    #     values=get_row)
